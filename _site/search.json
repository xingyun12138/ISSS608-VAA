[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands_on_exercises/exercise1/exercise1.html",
    "href": "Hands_on_exercises/exercise1/exercise1.html",
    "title": "Exercise1",
    "section": "",
    "text": "p_load in pacman package is to check if the package is already installed. If so, the package will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read.csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "InClassExercises/exercise5/exercise5.html",
    "href": "InClassExercises/exercise5/exercise5.html",
    "title": "exercise5",
    "section": "",
    "text": "load library\n\npacman::p_load(corrplot, tidyverse, ggstatsplot,ggcormat)\n\nread data\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\nbasic correlation matrix\n\npairs(wine[,1:11])\n\n\n\n\n\npairs(wine[,2:12])\n\n\n\n\nshowing corners\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\nincluding with correlation coefficient\n\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\nwith ggcormat\nbasic\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n\n\n\n\nmultiple plots\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\nCorplot\n\nwine.cor <- cor(wine[, 1:11])\n\n\ncorrplot(wine.cor)\n\n\n\n\nchange geometrics\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\nmixed layout\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nsignificant test\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\nreorder\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\nreorder with hclust\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n\n\n\n\nTernary\n\npacman::p_load(ggtern, plotly, tidyverse)\n\nimoprt data\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nprepare data\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n\nternary disgram\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\ninterative ternary diagram\n\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n\n\n\n\n\nheatmap\nlibrary and data\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\nwh <- read_csv(\"data/WHData-2018.csv\")\nrow.names(wh) <- wh$Country\n\ndataframe to matrix\n\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)\n\nstatic heatmap\nThe arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms\n\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\ndefault\n\nwh_heatmap <- heatmap(wh_matrix)"
  },
  {
    "objectID": "InClassExercises/exercise3/exercise3.html",
    "href": "InClassExercises/exercise3/exercise3.html",
    "title": "InClassExercise3",
    "section": "",
    "text": "Installing and loading R packages: tidyverse and ggiragh\n\npacman::p_load(ggiraph,tidyverse)\n\nImporting data\n\nexam_data <- read.csv(\"data/Exam_data.csv\")\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n         geom_dotplot(dotsize = 0.5)\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "InClassExercises/exercise4/exercise4.html",
    "href": "InClassExercises/exercise4/exercise4.html",
    "title": "exercise4",
    "section": "",
    "text": "pacman::p_load(DT,plotly,tidyverse,patchwork,ggiraph,ggstatsplot,readxl, performance, parameters, see)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nplot_ly(data = exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE) #<<\n\n\n\n\n\n\npal <- c(\"pink\", \"purple\", \"blue\", \"green\") #<<\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = pal) \n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     #<<\n                      \"<br>Class:\", CLASS),  #<<\n        color = ~RACE, \n        colors = \"Set1\")\n\n\n\n\n\n\np<-ggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n      geom_point(dotsize=1)+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)             \n\n\n\n\n\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = \"p\",\n  messages = FALSE\n)\n\n\n\n\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)\n\n\n\n\n\ncar_resale <- read_xls(\"ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "TakeHomeExercises/exercise2/exercise2.html",
    "href": "TakeHomeExercises/exercise2/exercise2.html",
    "title": "Take Home Exercise2",
    "section": "",
    "text": "Remark the take-home-exercise 1 from classmates, give them reasonable advise to improve the visualization and implement the changes by ggplot2 and tidyverse."
  },
  {
    "objectID": "TakeHomeExercises/exercise2/exercise2.html#import-data-packages",
    "href": "TakeHomeExercises/exercise2/exercise2.html#import-data-packages",
    "title": "Take Home Exercise2",
    "section": "1. Import data & Packages",
    "text": "1. Import data & Packages\n\npacman::p_load(ggplot2)\npacman::p_load(tidyverse)\npacman::p_load(see)\npacman::p_load(reshape2)\ndf <- read_csv(\"data/respopagesextod2022.csv\")\nhead(df)"
  },
  {
    "objectID": "TakeHomeExercises/exercise2/exercise2.html#critiques",
    "href": "TakeHomeExercises/exercise2/exercise2.html#critiques",
    "title": "Take Home Exercise2",
    "section": "2. Critiques",
    "text": "2. Critiques\noriginal work\n\n\n\n\n2.1 Clarity\nThe value is not showed clearly in a well-marked manner, especially the Y axis. Some plot font have a label. With the dimension of this graph, user can hardly see the X axis value for the topside plots.\n\n\n2.2 Aesthetics\nThe repeating horizontal Y axis is not needed, making the graph very wordy. Instead of having a “Male” and “Female” label 3 times, it is better to use one label to indicate the meaning of colors. Besides, it is not necessary to put multiple plot titles, as they are showing same information. It is enough to have one general title and area names."
  },
  {
    "objectID": "TakeHomeExercises/exercise2/exercise2.html#remake",
    "href": "TakeHomeExercises/exercise2/exercise2.html#remake",
    "title": "Take Home Exercise2",
    "section": "3. Remake",
    "text": "3. Remake\nData Pre-processing\n\nregions <- c(\"Bedok\",\"Choa Chu Kang\", \"Hougang\",\"Jurong West\",\"Punggol\",\"Sengkang\",\"Tampines\",\"Woodlands\",\"Yishun\")\ndf2 <- group_by(df,PA,AG,Sex)\ndf3 <- summarise(df2,Count=sum(Pop))\ndf3 <- filter(df3, PA %in% regions)\norder_vector <- c(\"0_to_4\",\"5_to_9\",\"10_to_14\",\"15_to_19\",\"20_to_24\",\"25_to_29\",\"30_to_34\",\"35_to_39\",\"40_to_44\",\"45_to_49\",\"50_to_54\",\"55_to_59\",\"60_to_64\",\"65_to_69\",\"70_to_74\",\"75_to_79\",\"80_to_84\",\"85_to_89\",\"90_and_over\")\ndf4 <- df3 %>%\n  arrange(PA,factor(AG, levels = order_vector))\nhead(df4)\n\nuse ggplot to visual\n\npacman::p_load(ggthemes)\ndf4 %>%\n  mutate(AG=factor(AG,levels=order_vector)) %>%\n  ggplot(aes(y=AG,\n             x=ifelse(test = Sex == \"Males\", yes=Count,no=-Count),\n             fill=Sex))+geom_bar(stat=\"identity\")+facet_wrap(~PA)+labs(x=\"Population Amount\",y=\"Age Group\",title=\"Age-Sex Structure of Singapore at Planning Area Level\")\n  ggsave(\"test1.png\", units=\"in\", dpi=300, width=15, height=15, device=\"png\")"
  },
  {
    "objectID": "TakeHomeExercises/exercise3/exercise3.html",
    "href": "TakeHomeExercises/exercise3/exercise3.html",
    "title": "Take Home Exercise3",
    "section": "",
    "text": "This exercise is proposed on analyzing the resale prices of public housing property by residential towns and estates in Singapore and discover the salient patterns. ggplot2 and its extensions should be the main tools to be applied.\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. The study period should be on 2022\n\nImport and preprocess the data set raw data can be acquired from https://data.gov.sg/dataset/resale-flat-prices\n\n\nrm(list=ls())\ndf <- read.csv(\"data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\nsummary(df)\n\n    month               town            flat_type            block          \n Length:146701      Length:146701      Length:146701      Length:146701     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n street_name        storey_range       floor_area_sqm    flat_model       \n Length:146701      Length:146701      Min.   : 31.00   Length:146701     \n Class :character   Class :character   1st Qu.: 82.00   Class :character  \n Mode  :character   Mode  :character   Median : 94.00   Mode  :character  \n                                       Mean   : 97.61                     \n                                       3rd Qu.:113.00                     \n                                       Max.   :249.00                     \n lease_commence_date remaining_lease     resale_price    \n Min.   :1966        Length:146701      Min.   : 140000  \n 1st Qu.:1985        Class :character   1st Qu.: 358000  \n Median :1996        Mode  :character   Median : 448000  \n Mean   :1996                           Mean   : 478258  \n 3rd Qu.:2007                           3rd Qu.: 565000  \n Max.   :2019                           Max.   :1418000  \n\nhead(df,10)\n\n     month       town flat_type block       street_name storey_range\n1  2017-01 ANG MO KIO    2 ROOM   406 ANG MO KIO AVE 10     10 TO 12\n2  2017-01 ANG MO KIO    3 ROOM   108  ANG MO KIO AVE 4     01 TO 03\n3  2017-01 ANG MO KIO    3 ROOM   602  ANG MO KIO AVE 5     01 TO 03\n4  2017-01 ANG MO KIO    3 ROOM   465 ANG MO KIO AVE 10     04 TO 06\n5  2017-01 ANG MO KIO    3 ROOM   601  ANG MO KIO AVE 5     01 TO 03\n6  2017-01 ANG MO KIO    3 ROOM   150  ANG MO KIO AVE 5     01 TO 03\n7  2017-01 ANG MO KIO    3 ROOM   447 ANG MO KIO AVE 10     04 TO 06\n8  2017-01 ANG MO KIO    3 ROOM   218  ANG MO KIO AVE 1     04 TO 06\n9  2017-01 ANG MO KIO    3 ROOM   447 ANG MO KIO AVE 10     04 TO 06\n10 2017-01 ANG MO KIO    3 ROOM   571  ANG MO KIO AVE 3     01 TO 03\n   floor_area_sqm     flat_model lease_commence_date    remaining_lease\n1              44       Improved                1979 61 years 04 months\n2              67 New Generation                1978 60 years 07 months\n3              67 New Generation                1980 62 years 05 months\n4              68 New Generation                1980  62 years 01 month\n5              67 New Generation                1980 62 years 05 months\n6              68 New Generation                1981           63 years\n7              68 New Generation                1979 61 years 06 months\n8              67 New Generation                1976 58 years 04 months\n9              68 New Generation                1979 61 years 06 months\n10             67 New Generation                1979 61 years 04 months\n   resale_price\n1        232000\n2        250000\n3        262000\n4        265000\n5        265000\n6        275000\n7        280000\n8        285000\n9        285000\n10       285000\n\n\nextract data that is on 3-ROOM, 4-ROOM and 5-ROOM types and happened in 2022.\n\ndf <- df[(df$month >= 2022/01/01)&(df$month <= 2022/12/31),]\ndf <- df[(df$flat_type == \"3 ROOM\")|(df$flat_type == \"4 ROOM\")|(df$flat_type == \"5 ROOM\"),]\nhead(df,10)\n\n         month       town flat_type block       street_name storey_range\n116678 2022-01 ANG MO KIO    3 ROOM   320  ANG MO KIO AVE 1     07 TO 09\n116679 2022-01 ANG MO KIO    3 ROOM   225  ANG MO KIO AVE 1     07 TO 09\n116680 2022-01 ANG MO KIO    3 ROOM   331  ANG MO KIO AVE 1     07 TO 09\n116681 2022-01 ANG MO KIO    3 ROOM   534 ANG MO KIO AVE 10     07 TO 09\n116682 2022-01 ANG MO KIO    3 ROOM   578 ANG MO KIO AVE 10     04 TO 06\n116683 2022-01 ANG MO KIO    3 ROOM   452 ANG MO KIO AVE 10     01 TO 03\n116684 2022-01 ANG MO KIO    3 ROOM   560 ANG MO KIO AVE 10     01 TO 03\n116685 2022-01 ANG MO KIO    3 ROOM   435 ANG MO KIO AVE 10     04 TO 06\n116686 2022-01 ANG MO KIO    3 ROOM   435 ANG MO KIO AVE 10     04 TO 06\n116687 2022-01 ANG MO KIO    3 ROOM   560 ANG MO KIO AVE 10     10 TO 12\n       floor_area_sqm     flat_model lease_commence_date    remaining_lease\n116678             73 New Generation                1977 54 years 05 months\n116679             67 New Generation                1978  55 years 01 month\n116680             68 New Generation                1981           58 years\n116681             82 New Generation                1980 57 years 02 months\n116682             67 New Generation                1980  57 years 01 month\n116683             83 New Generation                1979 56 years 07 months\n116684             67 New Generation                1980 57 years 02 months\n116685             67 New Generation                1979  56 years 01 month\n116686             67 New Generation                1979  56 years 01 month\n116687             67 New Generation                1980 57 years 02 months\n       resale_price\n116678       358000\n116679       355000\n116680       338000\n116681       420000\n116682       328000\n116683       360000\n116684       300000\n116685       333000\n116686       386000\n116687       330000\n\n\n\nSelection and Designed Consideration\nAnalytics\n\nload ggplot and tidyverse packages\n\npacman::p_load(ggplot2,ggstatsplot,tidyverse)\n\n3.1 Statistical Analysis\n3.1.1 One sample test on the sample mean for 3 different flat types. For each one of three types, we want to see how well the sample is reflecting the population.\n3 ROOM\n\nset.seed(1234)\n\ngghistostats(\n  data = df[df$flat_type==\"3 ROOM\",],\n  x = resale_price,\n  conf.level = 0.99,\n  type = \"parametric \",\n  xlab = \"Resale Price\",\n  title = \"One Sample test on 3 ROOM Resale Price\"\n)\n\n\n\n\n4 ROOM\n\ngghistostats(\n  data = df[df$flat_type==\"4 ROOM\",],\n  x = resale_price,\n  conf.level = 0.99,\n  type = \"parametric \",\n  xlab = \"Resale Price\",\n  title = \"One Sample test on 4 ROOM Resale Price\"\n)\n\n\n\n\n5 ROOM\n\ngghistostats(\n  data = df[df$flat_type==\"5 ROOM\",],\n  x = resale_price,\n  conf.level = 0.99,\n  type = \"parametric\",\n  xlab = \"Resale Price\",\n  title = \"One Sample test on 5 ROOM Resale Price\"\n)\n\n\n\n\nFrom 3 graphs above, we can see that all 3 tests have a p value less than 0.01, which means our sample is indicating the population mean at 0.99 confidence level. Mean resale price of 3 Room, 4 Room and 5 Room are respectively $391000, $551000 and $656000.\n3.1.2 One-way Anova. We can compare the sample mean among 3 types.\n\nggbetweenstats(\n  data = df,\n  x = flat_type, \n  y = resale_price,\n  conf.level = 0.95,\n  type = \"parametric\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE,\n  xlab = \"Flat Type\",\n  ylab = \"Resale Price\",\n  title = \"One Way Anova test on Resale Price vs Flat Type\"\n)\n\n\n\n\nIt is clear that p value is less than 0.01. There are significant difference between the sample means.\n3.1.3 Significant Test\n\ndf1 <- df %>% \n  mutate(price_bins = \n           cut(resale_price, \n               breaks = c(300000,400000,500000,600000,700000))\n)\nggbarstats(df1, \n           x = price_bins, \n           y = flat_type)\n\n\n\n\n3 ROOM resale price are most located in the lowest range between $300k and $400k. 4 Room are most located in the second and third layers, almost 85 percent are in $400kM and $600k. while for 5 Room, 40 percent are above $600k, while half are in $500k and $600k.\n3.1.4 Statistic Model\n\npacman::p_load(readxl, performance, parameters, see)\ndf1 <- df %>%\n   mutate(flat_type = case_when(\n                    flat_type == \"3 ROOM\" ~ 3,\n                    flat_type == \"4 ROOM\" ~ 4,\n                    flat_type == \"5 ROOM\" ~ 5,)\n                  )\nmodel <- lm(resale_price ~ floor_area_sqm+flat_type+town+storey_range+flat_model,data=df1)\nsummary(model)\n\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + flat_type + town + \n    storey_range + flat_model, data = df1)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-273309  -46369   -4458   43262  464371 \n\nCoefficients:\n                                   Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                       3.195e+04  2.786e+04   1.147  0.25156    \nfloor_area_sqm                    8.936e+00  8.522e+01   0.105  0.91649    \nflat_type                         1.536e+05  2.335e+03  65.789  < 2e-16 ***\ntownBEDOK                        -5.016e+04  2.926e+03 -17.142  < 2e-16 ***\ntownBISHAN                        6.675e+04  4.200e+03  15.890  < 2e-16 ***\ntownBUKIT BATOK                  -7.448e+04  3.319e+03 -22.437  < 2e-16 ***\ntownBUKIT MERAH                   7.651e+04  3.271e+03  23.393  < 2e-16 ***\ntownBUKIT PANJANG                -1.381e+05  3.408e+03 -40.532  < 2e-16 ***\ntownBUKIT TIMAH                   1.045e+05  1.011e+04  10.339  < 2e-16 ***\ntownCENTRAL AREA                  3.818e+04  6.318e+03   6.043 1.54e-09 ***\ntownCHOA CHU KANG                -1.373e+05  3.108e+03 -44.189  < 2e-16 ***\ntownCLEMENTI                      5.854e+03  3.561e+03   1.644  0.10016    \ntownGEYLANG                       2.632e+03  3.635e+03   0.724  0.46904    \ntownHOUGANG                      -7.420e+04  3.069e+03 -24.180  < 2e-16 ***\ntownJURONG EAST                  -9.693e+04  3.988e+03 -24.304  < 2e-16 ***\ntownJURONG WEST                  -1.380e+05  3.009e+03 -45.846  < 2e-16 ***\ntownKALLANG/WHAMPOA               4.658e+04  3.316e+03  14.049  < 2e-16 ***\ntownMARINE PARADE                 7.301e+04  5.604e+03  13.028  < 2e-16 ***\ntownPASIR RIS                    -9.132e+04  3.784e+03 -24.133  < 2e-16 ***\ntownPUNGGOL                      -9.381e+04  3.034e+03 -30.918  < 2e-16 ***\ntownQUEENSTOWN                    6.686e+04  3.606e+03  18.544  < 2e-16 ***\ntownSEMBAWANG                    -1.154e+05  3.608e+03 -31.994  < 2e-16 ***\ntownSENGKANG                     -1.157e+05  2.936e+03 -39.410  < 2e-16 ***\ntownSERANGOON                    -1.034e+04  4.286e+03  -2.412  0.01585 *  \ntownTAMPINES                     -6.417e+04  2.997e+03 -21.412  < 2e-16 ***\ntownTOA PAYOH                     1.058e+04  3.465e+03   3.053  0.00227 ** \ntownWOODLANDS                    -1.279e+05  2.925e+03 -43.722  < 2e-16 ***\ntownYISHUN                       -9.663e+04  2.850e+03 -33.903  < 2e-16 ***\nstorey_range04 TO 06              1.966e+04  1.420e+03  13.840  < 2e-16 ***\nstorey_range07 TO 09              3.431e+04  1.440e+03  23.832  < 2e-16 ***\nstorey_range10 TO 12              4.315e+04  1.488e+03  28.991  < 2e-16 ***\nstorey_range13 TO 15              6.515e+04  1.804e+03  36.105  < 2e-16 ***\nstorey_range16 TO 18              8.993e+04  2.345e+03  38.351  < 2e-16 ***\nstorey_range19 TO 21              1.308e+05  3.337e+03  39.195  < 2e-16 ***\nstorey_range22 TO 24              1.473e+05  3.933e+03  37.454  < 2e-16 ***\nstorey_range25 TO 27              1.810e+05  4.444e+03  40.726  < 2e-16 ***\nstorey_range28 TO 30              2.285e+05  5.551e+03  41.162  < 2e-16 ***\nstorey_range31 TO 33              2.258e+05  7.186e+03  31.424  < 2e-16 ***\nstorey_range34 TO 36              2.440e+05  7.037e+03  34.674  < 2e-16 ***\nstorey_range37 TO 39              2.573e+05  8.332e+03  30.882  < 2e-16 ***\nstorey_range40 TO 42              2.884e+05  1.307e+04  22.061  < 2e-16 ***\nstorey_range43 TO 45              2.780e+05  2.055e+04  13.532  < 2e-16 ***\nstorey_range46 TO 48              3.861e+05  3.074e+04  12.560  < 2e-16 ***\nstorey_range49 TO 51              2.930e+05  4.299e+04   6.816 9.54e-12 ***\nflat_modelAdjoined flat          -1.318e+05  3.088e+04  -4.268 1.98e-05 ***\nflat_modelDBSS                    8.007e+04  2.774e+04   2.887  0.00390 ** \nflat_modelImproved               -1.387e+05  2.751e+04  -5.041 4.65e-07 ***\nflat_modelImproved-Maisonette     4.188e+04  5.833e+04   0.718  0.47283    \nflat_modelModel A                -4.859e+04  2.751e+04  -1.766  0.07741 .  \nflat_modelModel A-Maisonette      4.210e+04  2.909e+04   1.447  0.14779    \nflat_modelModel A2               -1.088e+05  2.782e+04  -3.912 9.18e-05 ***\nflat_modelNew Generation         -1.302e+05  2.755e+04  -4.724 2.32e-06 ***\nflat_modelPremium Apartment      -4.748e+04  2.753e+04  -1.725  0.08457 .  \nflat_modelPremium Apartment Loft  1.713e+05  3.378e+04   5.071 3.98e-07 ***\nflat_modelSimplified             -1.454e+05  2.760e+04  -5.266 1.40e-07 ***\nflat_modelStandard               -2.107e+05  2.766e+04  -7.617 2.68e-14 ***\nflat_modelTerrace                 3.357e+05  3.347e+04  10.029  < 2e-16 ***\nflat_modelType S1                 2.472e+05  3.029e+04   8.161 3.47e-16 ***\nflat_modelType S2                 2.043e+05  3.197e+04   6.390 1.69e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 72670 on 27309 degrees of freedom\nMultiple R-squared:  0.7885,    Adjusted R-squared:  0.7881 \nF-statistic:  1756 on 58 and 27309 DF,  p-value: < 2.2e-16\n\n\nChecking for multicolinearity. Multicollinearity refers to a situation in which two or more predictor variables in a linear regression model are highly correlated with each other. In such cases, it becomes difficult to estimate the individual effect of each predictor variable on the outcome variable, and it can lead to unstable and unreliable estimates of the regression coefficients.\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\nWe can see that floor type and floor area is highly correlated. This also make sense in reality: larger house would have more rooms.\nChecking normality assumption.The normality assumption is required for valid statistical inference. The normality assumption also enables the calculation of accurate confidence intervals and p-values for the regression coefficients.Normality of the residuals indicates that the model is capturing the majority of the variation in the data.\n\ncheck_n <- check_normality(model)\nplot(check_n)\n\n\n\n\nWe can see that our model almost follow normal distribution.\nCheck model for homogeneity of variances.Checking the homogeneity of variances is an important assumption for linear regression models. In linear regression, the homogeneity of variances assumption means that the variance of the residuals is constant across all levels of the predictor variables.When the homogeneity of variances assumption is not met, the regression model may not provide accurate predictions, and the standard errors and p-values may be biased, which can lead to incorrect conclusions about the significance of the predictor variables.\n\ncheck_h <- check_heteroscedasticity(model)\nplot(check_h)\n\n\n\n\nWe can see that Homogeneity of variance is not violated.validity and accuracy of the linear regression model is confirmed."
  },
  {
    "objectID": "TakeHomeExercises/exercise1/exercise1.html",
    "href": "TakeHomeExercises/exercise1/exercise1.html",
    "title": "exercise1",
    "section": "",
    "text": "Step-by-step Preparation\n\n\n\n\n\n\n\n\nNo.\nStep\nScreenshot\n\n\n\n\n1\nClick on “More”, choose the local csv data file to connect it with Tableau.\n\n\n\n2\nLink the “respopagesextod2022.csv” to the Tableau data source.\n\n\n\n3\nSeparate male and female to create a age-sex pyramid view. Click on the little triangle —> Create Calculated Filed… to create a new measure value.\n\n\n\n4\nIn the pop up window, create a new variable called “Male” to monitor male population information.\n\n\n\n5\nSimilarly, create another new variable called “Female” to monitor female population.\n\n\n\n6\nDrag new-create variables “Male” and “Female” to Columns, and “AG” to Rows.\n\n\n\n7\nTo have a percentile view, click on the Analysis —> Percentage of —> Table. You will see the axis become percentiles instead of population exact values.\n\n\n\n8\nStandardizing the plot to a pyramid view by right click on the Y axis —> Sort descending.\n\n\n\n9\nRight click on the X female axis —> Edit Axis…\n\n\n\n10\nIn the pop up window, choose “Reversed” check box under “Scale”.\n\n\n\n11\nDrag “Sex” to colors.On the right hand side, choose a better fit color for the plot to distinguish male and female.\n\n\n\n12\nDrag PA to Rows to create a trellis display. Right click on the Y axis, click on the Filter…\n\n\n\n13\nIn the pop up window, go to Top —> By filed, and choose top 9 plots by sum of Pop value.\n\n\n\n14\nChange the table name."
  },
  {
    "objectID": "InClassExercises/exercise6/exercise6.html",
    "href": "InClassExercises/exercise6/exercise6.html",
    "title": "exercise 7",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "InClassExercises/exercise7/exercise7.html",
    "href": "InClassExercises/exercise7/exercise7.html",
    "title": "exercise 7",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\nsgpools <- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nRows: 306 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): NAME, ADDRESS, OUTLET TYPE\ndbl (4): POSTCODE, XCOORD, YCOORD, Gp1Gp2 Winnings\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME                            ADDRESS POSTC…¹ XCOORD YCOORD OUTLE…² Gp1Gp…³\n   <chr>                           <chr>     <dbl>  <dbl>  <dbl> <chr>     <dbl>\n 1 Livewire (Marina Bay Sands)     2 Bayf…   18972 30842. 29599. Branch        5\n 2 Livewire (Resorts World Sentos… 26 Sen…   98138 26704. 26526. Branch       11\n 3 SportsBuzz (Kranji)             Lotus …  738078 20118. 44888. Branch        0\n 4 SportsBuzz (PoMo)               1 Sele…  188306 29777. 31382. Branch       44\n 5 Prime Serangoon North           Blk 54…  552542 32239. 39519. Branch        0\n 6 Singapore Pools Woodlands Cent… 1A Woo…  731001 21012. 46987. Branch        3\n 7 Singapore Pools 64 Circuit Rd … Blk 64…  370064 33990. 34356. Branch       17\n 8 Singapore Pools 88 Circuit Rd … Blk 88…  370088 33847. 33976. Branch       16\n 9 Singapore Pools Anchorvale Rd … Blk 30…  540308 33910. 41275. Branch       21\n10 Singapore Pools Ang Mo Kio N2 … Blk 20…  560202 29246. 38943. Branch       25\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`\n\n\n\nsgpools_sf <- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                ADDRESS POSTC…¹ OUTLE…² Gp1Gp…³            geometry\n * <chr>               <chr>     <dbl> <chr>     <dbl>         <POINT [m]>\n 1 Livewire (Marina B… 2 Bayf…   18972 Branch        5 (30841.56 29598.56)\n 2 Livewire (Resorts … 26 Sen…   98138 Branch       11  (26703.87 26525.7)\n 3 SportsBuzz (Kranji) Lotus …  738078 Branch        0 (20117.93 44888.06)\n 4 SportsBuzz (PoMo)   1 Sele…  188306 Branch       44 (29776.95 31382.18)\n 5 Prime Serangoon No… Blk 54…  552542 Branch        0 (32238.69 39518.76)\n 6 Singapore Pools Wo… 1A Woo…  731001 Branch        3 (21012.15 46987.32)\n 7 Singapore Pools 64… Blk 64…  370064 Branch       17 (33990.39 34355.53)\n 8 Singapore Pools 88… Blk 88…  370088 Branch       16 (33847.38 33976.04)\n 9 Singapore Pools An… Blk 30…  540308 Branch       21 (33909.93 41274.52)\n10 Singapore Pools An… Blk 20…  560202 Branch       25  (29246.06 38942.6)\n# … with 296 more rows, and abbreviated variable names ¹​POSTCODE,\n#   ²​`OUTLET TYPE`, ³​`Gp1Gp2 Winnings`\n\n\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\nLegend for symbol sizes not available in view mode.\n\n\n\n\n\n\n\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\nLegend for symbol sizes not available in view mode.\n\n\n\n\n\n\n\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\nLegend for symbol sizes not available in view mode.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "TakeHomeExercises/exercise4/takehomeex4.html",
    "href": "TakeHomeExercises/exercise4/takehomeex4.html",
    "title": "Take Home Exercise4",
    "section": "",
    "text": "Motivation\nThis take home activity is purposed on analysing the impact of COVID19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade (i.e. Import, Export and Trade Balance). Data can be acquired from\nhttps://tablebuilder.singstat.gov.sg/statistical-tables/downloadMultiple/1JmxrUUC_0a26wjZN4FFXw.\nThe study period should be between January 2020 to December 2022.\n\n\nImport the data and load library.\nOriginal data contains quite a lot description information, we only keep the data table with import and export records. For each dataset, we take out records from 2020 Jan t0 2022 Jan, and set all value unit to Millions.\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table,tidyverse,dplyr, readxl)\n\n\ndf1 <- read_excel(\"data/outputFile.xlsx\", sheet = (\"T1\"))\ndf2 <- read_excel(\"data/outputFile.xlsx\", sheet = (\"T2\"))\ndf1 <- na.omit(df1)\ndf1<- data.frame(t(df1))\ndf1[1,1] <- \"Date\"\ncolnames(df1) <- as.character(unlist(df1[1,]))\ndf1 <- slice(df1, -1)\ndf1$Date <- gsub(\" \", \"-\", df1$Date)\ndf1 <- df1[2:37,]\ndf1$Date <-  seq(as.Date(\"2020-01-01\"), as.Date(\"2022-12-01\"), by = \"month\")\ndf1[,2:120] <- lapply(df1[,2:120], function(x) as.numeric(gsub(\"[^[:digit:].-]\", \"\", x)))\ndf1 <- rownames_to_column(df1, var = \"row_index\")\ndf1 <- df1[,2:121]\nfor (i in 2:120){\n  temp <- colnames(df1)[i]\n  if (grepl(\"Thousand\", temp)){\n    df1[,i] = df1[,i]/1000\n  }\n  new_colname <- gsub(\"\\\\(.*?\\\\)\", \"\", temp)\n  colnames(df1)[i] <- new_colname\n}\n\ndf2 <- na.omit(df2)\ndf2<- data.frame(t(df2))\ndf2[1,1] <- \"Date\"\ncolnames(df2) <- as.character(unlist(df2[1,]))\ndf2 <- slice(df2, -1)\ndf2$Date <- gsub(\" \", \"-\", df2$Date)\ndf2 <- df2[2:37,]\ndf2$Date <-  seq(as.Date(\"2020-01-01\"), as.Date(\"2022-12-01\"), by = \"month\")\ndf2[,2:120] <- lapply(df2[,2:92], function(x) as.numeric(gsub(\"[^[:digit:].-]\", \"\", x)))\ndf2 <- rownames_to_column(df2, var = \"row_index\")\ndf2 <- df2[,2:93]\nfor (i in 2:92){\n  temp <- colnames(df2)[i]\n  if (grepl(\"Thousand\", temp)){\n    df2[,i] = df2[,i]/1000\n  }\n  new_colname <- gsub(\"\\\\(.*?\\\\)\", \"\", temp)\n  colnames(df2)[i] <- new_colname\n}\n\ndf3 <- pivot_longer(df1, cols = 2:120, names_to = \"Country\",values_to = \"Value\")\ndf4 <- pivot_longer(df2, cols = 2:92, names_to = \"Country\",values_to = \"Value\")\ndf3$Type <- rep(\"Import\", 4284)\ndf4$Type <- rep(\"Export\", 3276)\ndf_combined <- rbind(df3,df4)\n\n\n\nAnalysis\nPreview the combined data. We can see that the overall trend is decreasing, but Export is alwasy higher than Import. Singapore is still earning morning from internaltional trades during COVID period.\n\n\ndf_combined %>% \n  filter(Country %in% c(\"Total Merchandise Exports \",\"Total Merchandise Imports \")) %>%\n    ggplot()+\n      geom_line(aes(x=Date,y=Value, color=Type))\n\n\n\n\nFrom the graph above, we noticed that there are 3 significant fluctuation: 2020 Aug, 2021 Aug and 2022 July. We perform a slopegraph to view those 3 periods to identify who is causing such fluctuation.\n\ndf_combined %>% \n  filter(Date ==  \"2020-08-01\")%>%\n    filter(!(Country %in% c(\"Total Merchandise Exports \",\"Total Merchandise Imports \", \"Asia \",\"Europe \", \"Oceania \")))%>%\n      filter(Value > 1000) %>%\n        CGPfunctions::newggslopegraph(Type, Value, Country,\n                      Title = \"Import and Export value in Singapore\",\n                      SubTitle = \"August 2020\",\n                      Caption = \"Unit: Million\")\n\n\n\n\n\ndf_combined %>% \n  filter(Date ==  \"2021-08-01\")%>%\n    filter(!(Country %in% c(\"Total Merchandise Exports \",\"Total Merchandise Imports \", \"Asia \",\"Europe \", \"Oceania \")))%>%\n      filter(Value > 1000) %>%\n        CGPfunctions::newggslopegraph(Type, Value, Country,\n                      Title = \"Import and Export value in Singapore\",\n                      SubTitle = \"August 2021\",\n                      Caption = \"Unit: Million\")\n\n\n\n\n\ndf_combined %>% \n  filter(Date ==  \"2022-07-01\")%>%\n    filter(!(Country %in% c(\"Total Merchandise Exports \",\"Total Merchandise Imports \", \"Asia \",\"Europe \", \"Oceania \")))%>%\n      filter(Value > 1000) %>%\n        CGPfunctions::newggslopegraph(Type, Value, Country,\n                      Title = \"Import and Export value in Singapore\",\n                      SubTitle = \"July 2022\",\n                      Caption = \"Unit: Million\")\n\n\n\n\nWe can see that Mainland China is leading the Trading amount. Moving on we do a cycle plot on the biggest market for SG.\n\ndf5 <- df1\ndf6 <- df2\ndf5$month <- factor(month(df5$Date), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \ndf5$year <- year(ymd(df5$Date))\nChina <- df5 %>% \n  select(\"Mainland China \", \n         month, \n         year)\nhline.data <- China %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Mainland China `))\n\nggplot() + \n  geom_line(data=China,\n            aes(x=year, \n                y=`Mainland China ` , \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Singapore Import Amount in Millions, from China\") +\n  xlab(\"\") +\n  ylab(\"Value\")\n\n\n\n\n\ndf6$month <- factor(month(df6$Date), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \ndf6$year <- year(ymd(df6$Date))\nChina <- df6 %>% \n  select(\"Mainland China \", \n         month, \n         year)\nhline.data <- China %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Mainland China `))\n\nggplot() + \n  geom_line(data=China,\n            aes(x=year, \n                y=`Mainland China ` , \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Singapore Export Amount in Millions, to China\") +\n  xlab(\"\") +\n  ylab(\"Value\")\n\n\n\n\nWe can see that there is a significant drop down for both import and export for China market. However, the fluctuation of export donot look like casued by China market."
  },
  {
    "objectID": "InClassExercises/exercise8/exercise8.html",
    "href": "InClassExercises/exercise8/exercise8.html",
    "title": "In Class Exercise 8",
    "section": "",
    "text": "load libraries\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\nData Pre-process\nload data and preview it\n\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\n\nRows: 54 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): label, Department, Title\ndbl (1): id\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\nRows: 9063 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SentDate, Subject, MainSubject, sourceLabel, targetLabel\ndbl  (2): source, target\ntime (1): SentTime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'source', 'target'. You can override using\nthe `.groups` argument.\n\n\n\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# … with 48 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# … with 1,369 more rows\n\n\n\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# … with 1,366 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# … with 51 more rows\n\n\nplot\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\nUsing \"stress\" as default layout\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\n\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\nUsing \"stress\" as default layout\n\ng + theme_graph()\n\n\n\n\n\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\nUsing \"stress\" as default layout\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\ng <- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()"
  },
  {
    "objectID": "InClassExercises/exercise9/未命名.html",
    "href": "InClassExercises/exercise9/未命名.html",
    "title": "In Class Ex 9",
    "section": "",
    "text": "pacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse)\n\n\ncoffeechain <- read_rds(\"data/CoffeeChain.rds\")\nproduct <- coffeechain %>%\n  group_by(`Product`) %>%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %>%\n  ungroup()\n\n\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\nsales_report <- coffeechain %>%\n  filter(Date >= \"2013-01-01\") %>%\n  mutate(Month = month(Date)) %>%\n  group_by(Month, Product) %>%\n  summarise(Sales = sum(Sales)) %>%\n  ungroup() %>%\n  select(Month, Product, Sales)\n\n`summarise()` has grouped output by 'Month'. You can override using the\n`.groups` argument.\n\n\n\nmins <- group_by(sales_report, Product) %>% \n  slice(which.min(Sales))\nmaxs <- group_by(sales_report, Product) %>% \n  slice(which.max(Sales))\nends <- group_by(sales_report, Product) %>% \n  filter(Month == max(Month))\n\n\nquarts <- sales_report %>%\n  group_by(Product) %>%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %>%\n  right_join(sales_report)\n\nJoining, by = \"Product\"\n\n\n\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())\n\n\n\n\n\nproduct %>%\n  gt::gt() %>%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %>%\n  gt_theme_538()\n\n\n\n\n\n  \n  \n    \n      Product\n      current\n    \n  \n  \n    Amaretto\n          \n    Caffe Latte\n          \n    Caffe Mocha\n          \n    Chamomile\n          \n    Colombian\n          \n    Darjeeling\n          \n    Decaf Espresso\n          \n    Decaf Irish Cream\n          \n    Earl Grey\n          \n    Green Tea\n          \n    Lemon\n          \n    Mint\n          \n    Regular Espresso\n          \n  \n  \n  \n\n\n\n\n\nreport <- coffeechain %>%\n  mutate(Year = year(Date)) %>%\n  filter(Year == \"2013\") %>%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %>%\n  group_by(Product, Month) %>%\n  summarise(Sales = sum(Sales)) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'Product'. You can override using the\n`.groups` argument.\n\n\n\nreport %>%\n  group_by(Product) %>%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   <chr>             <list>         \n 1 Amaretto          <dbl [12]>     \n 2 Caffe Latte       <dbl [12]>     \n 3 Caffe Mocha       <dbl [12]>     \n 4 Chamomile         <dbl [12]>     \n 5 Colombian         <dbl [12]>     \n 6 Darjeeling        <dbl [12]>     \n 7 Decaf Espresso    <dbl [12]>     \n 8 Decaf Irish Cream <dbl [12]>     \n 9 Earl Grey         <dbl [12]>     \n10 Green Tea         <dbl [12]>     \n11 Lemon             <dbl [12]>     \n12 Mint              <dbl [12]>     \n13 Regular Espresso  <dbl [12]>     \n\n\n\nreport %>%\n  group_by(Product) %>%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %>%\n   gt() %>%\n   gt_plt_sparkline('Monthly Sales')\n\n\n\n\n\n  \n  \n    \n      Product\n      Monthly Sales\n    \n  \n  \n    Amaretto\n          1.2K\n    Caffe Latte\n          1.5K\n    Caffe Mocha\n          3.7K\n    Chamomile\n          3.3K\n    Colombian\n          5.5K\n    Darjeeling\n          3.0K\n    Decaf Espresso\n          3.2K\n    Decaf Irish Cream\n          2.7K\n    Earl Grey\n          3.0K\n    Green Tea\n          1.5K\n    Lemon\n          4.4K\n    Mint\n          1.5K\n    Regular Espresso\n          1.1K\n  \n  \n  \n\n\n\n\n\nreport %>% \n  group_by(Product) %>% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %>%\n  gt() %>%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n  \n  \n    \n      Product\n      Min\n      Max\n      Average\n    \n  \n  \n    Amaretto\n1016\n1210\n1,119.00\n    Caffe Latte\n1398\n1653\n1,528.33\n    Caffe Mocha\n3322\n3828\n3,613.92\n    Chamomile\n2967\n3395\n3,217.42\n    Colombian\n5132\n5961\n5,457.25\n    Darjeeling\n2926\n3281\n3,112.67\n    Decaf Espresso\n3181\n3493\n3,326.83\n    Decaf Irish Cream\n2463\n2901\n2,648.25\n    Earl Grey\n2730\n3005\n2,841.83\n    Green Tea\n1339\n1476\n1,398.75\n    Lemon\n3851\n4418\n4,080.83\n    Mint\n1388\n1669\n1,519.17\n    Regular Espresso\n890\n1218\n1,023.42\n  \n  \n  \n\n\n\n\n\nspark <- report %>%\n  group_by(Product) %>%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\nsales <- report %>% \n  group_by(Product) %>% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\nsales_data = left_join(sales, spark)\n\nJoining, by = \"Product\"\n\nsales_data %>%\n  gt() %>%\n  gt_plt_sparkline('Monthly Sales')\n\n\n\n\n\n  \n  \n    \n      Product\n      Min\n      Max\n      Average\n      Monthly Sales\n    \n  \n  \n    Amaretto\n1016\n1210\n1119.000\n          1.2K\n    Caffe Latte\n1398\n1653\n1528.333\n          1.5K\n    Caffe Mocha\n3322\n3828\n3613.917\n          3.7K\n    Chamomile\n2967\n3395\n3217.417\n          3.3K\n    Colombian\n5132\n5961\n5457.250\n          5.5K\n    Darjeeling\n2926\n3281\n3112.667\n          3.0K\n    Decaf Espresso\n3181\n3493\n3326.833\n          3.2K\n    Decaf Irish Cream\n2463\n2901\n2648.250\n          2.7K\n    Earl Grey\n2730\n3005\n2841.833\n          3.0K\n    Green Tea\n1339\n1476\n1398.750\n          1.5K\n    Lemon\n3851\n4418\n4080.833\n          4.4K\n    Mint\n1388\n1669\n1519.167\n          1.5K\n    Regular Espresso\n890\n1218\n1023.417\n          1.1K\n  \n  \n  \n\n\n\n\n\nbullet <- coffeechain %>%\n  filter(Date >= \"2013-01-01\") %>%\n  group_by(`Product`) %>%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %>%\n  ungroup() \nsales_data = sales_data %>%\n  left_join(bullet)\n\nJoining, by = \"Product\"\n\nsales_data %>%\n  gt() %>%\n  gt_plt_sparkline('Monthly Sales') %>%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %>%\n  gt_theme_538()\n\n\n\n\n\n  \n  \n    \n      Product\n      Min\n      Max\n      Average\n      Monthly Sales\n      Actual\n    \n  \n  \n    Amaretto\n1016\n1210\n1119.000\n          1.2K\n          \n    Caffe Latte\n1398\n1653\n1528.333\n          1.5K\n          \n    Caffe Mocha\n3322\n3828\n3613.917\n          3.7K\n          \n    Chamomile\n2967\n3395\n3217.417\n          3.3K\n          \n    Colombian\n5132\n5961\n5457.250\n          5.5K\n          \n    Darjeeling\n2926\n3281\n3112.667\n          3.0K\n          \n    Decaf Espresso\n3181\n3493\n3326.833\n          3.2K\n          \n    Decaf Irish Cream\n2463\n2901\n2648.250\n          2.7K\n          \n    Earl Grey\n2730\n3005\n2841.833\n          3.0K\n          \n    Green Tea\n1339\n1476\n1398.750\n          1.5K\n          \n    Lemon\n3851\n4418\n4080.833\n          4.4K\n          \n    Mint\n1388\n1669\n1519.167\n          1.5K\n          \n    Regular Espresso\n890\n1218\n1023.417\n          1.1K"
  }
]